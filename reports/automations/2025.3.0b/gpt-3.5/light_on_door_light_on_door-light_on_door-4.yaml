---
uuid: fe0f8159-aa6f-478c-bfdd-e361f3fe2a7e
task_id: light_on_door_light_on_door-light_on_door-4
model_id: null
category: binary_sensor
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Light on Door
    description: Turn on a light when the door opens and turn it off when the door closes or after a timeout.
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor that triggers the automation.
        selector:
          entity:
            domain: binary_sensor
      light_switch:
        name: Light Switch
        description: The light entity to turn on or off when the automation triggers.
        selector:
          entity:
            domain: light

  trigger:
    platform: state
    entity_id: !input door_sensor
    from: 'off'
    to: 'on'

  variables:
    timeout: "{{ 2 * 60 }}"  # 2 minutes timeout in seconds

  action:
    - service: light.turn_on
      target: !input light_switch

    - wait_for_trigger:
        platform: state
        entity_id: !input door_sensor
        to: 'off'
      timeout: "{{ timeout }}"
      continue_on_timeout: true

    - service: light.turn_off
      target: !input light_switch
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMTAC0VC8ZASV7071SJV98W9
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      messages:
      - role: system
        agent_id: conversation.mock_title
        content: |-
          Current time is 13:10:49. Today's date is 2025-02-23.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        agent_id: conversation.mock_title
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Light on Door
            description: Turn on a light when the door opens and turn it off when the door closes or after a timeout.
            domain: automation
            input:
              door_sensor:
                name: Door Sensor
                description: The binary sensor that triggers the automation.
                selector:
                  entity:
                    domain: binary_sensor
              light_switch:
                name: Light Switch
                description: The light entity to turn on or off when the automation triggers.
                selector:
                  entity:
                    domain: light

          trigger:
            platform: state
            entity_id: !input door_sensor
            from: 'off'
            to: 'on'

          variables:
            timeout: "{{ 2 * 60 }}"  # 2 minutes timeout in seconds

          action:
            - service: light.turn_on
              target: !input light_switch

            - wait_for_trigger:
                platform: state
                entity_id: !input door_sensor
                to: 'off'
              timeout: "{{ timeout }}"
              continue_on_timeout: true

            - service: light.turn_off
              target: !input light_switch
          ```
      tools: null
  tries: 0
