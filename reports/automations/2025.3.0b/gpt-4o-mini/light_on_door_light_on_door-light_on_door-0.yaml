---
uuid: c59acc83-f8e2-4857-adbc-0a8ab05f22dc
task_id: light_on_door_light_on_door-light_on_door-0
model_id: null
category: binary_sensor
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: "```yaml\nblueprint:\n  name: Light on Door Open\n  description: Turn on\
  \ a light when the door opens and turn it off when the door closes or after a timeout.\n\
  \  domain: automation\n  input:\n    door_sensor:\n      name: Door Sensor\n   \
  \   description: A binary sensor to trigger the automation when the door opens.\n\
  \      selector:\n        entity:\n          domain: binary_sensor\n    light_switch:\n\
  \      name: Light Switch\n      description: One or more light entities to turn\
  \ on when the door opens.\n      selector:\n        target:\n          entity:\n\
  \            domain: light\n\ntrigger:\n  - platform: state\n    entity_id: !input\
  \ door_sensor\n    to: 'on'  # Trigger when door sensor is in 'on' state (door opens)\n\
  \naction:\n  - service: light.turn_on\n    target:\n      entity_id: !input light_switch\
  \  # Turn on the specified light(s)\n      \n  - delay: '00:02:00'  # Wait for 2\
  \ minutes before checking door state again\n\n  - choose:\n      - conditions:\n\
  \          - condition: state\n            entity_id: !input door_sensor\n     \
  \       state: 'off'  # Check if the door is closed\n        sequence:\n       \
  \   - service: light.turn_off\n            target:\n              entity_id: !input\
  \ light_switch  # Turn off the light if the door is closed\n      - default: []\
  \  # No action if the door is still open\n\nmode: single  # Ensures that the automation\
  \ does not run multiple times simultaneously\n```"
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMSVND7YQ2H22X1QQDHRTVHF
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      messages:
      - role: system
        agent_id: conversation.mock_title
        content: |-
          Current time is 08:53:48. Today's date is 2025-02-23.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        agent_id: conversation.mock_title
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: "```yaml\nblueprint:\n  name: Light on Door Open\n  description:\
          \ Turn on a light when the door opens and turn it off when the door closes\
          \ or after a timeout.\n  domain: automation\n  input:\n    door_sensor:\n\
          \      name: Door Sensor\n      description: A binary sensor to trigger\
          \ the automation when the door opens.\n      selector:\n        entity:\n\
          \          domain: binary_sensor\n    light_switch:\n      name: Light Switch\n\
          \      description: One or more light entities to turn on when the door\
          \ opens.\n      selector:\n        target:\n          entity:\n        \
          \    domain: light\n\ntrigger:\n  - platform: state\n    entity_id: !input\
          \ door_sensor\n    to: 'on'  # Trigger when door sensor is in 'on' state\
          \ (door opens)\n\naction:\n  - service: light.turn_on\n    target:\n   \
          \   entity_id: !input light_switch  # Turn on the specified light(s)\n \
          \     \n  - delay: '00:02:00'  # Wait for 2 minutes before checking door\
          \ state again\n\n  - choose:\n      - conditions:\n          - condition:\
          \ state\n            entity_id: !input door_sensor\n            state: 'off'\
          \  # Check if the door is closed\n        sequence:\n          - service:\
          \ light.turn_off\n            target:\n              entity_id: !input light_switch\
          \  # Turn off the light if the door is closed\n      - default: []  # No\
          \ action if the door is still open\n\nmode: single  # Ensures that the automation\
          \ does not run multiple times simultaneously\n```"
      tools: null
  tries: 0
