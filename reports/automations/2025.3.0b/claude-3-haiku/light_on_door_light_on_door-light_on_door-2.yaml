---
uuid: 923cffef-6840-46d3-999c-d637d1c885fb
task_id: light_on_door_light_on_door-light_on_door-2
model_id: null
category: binary_sensor
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Light on door
    description: Turn on a light when a door opens.
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor that detects when the door opens and closes.
        selector:
          entity:
            domain: binary_sensor
      light_switch:
        name: Light Switch
        description: The light or lights to turn on when the door opens.
        selector:
          target:
            entity:
              domain: light

  trigger:
    platform: state
    entity_id: !input door_sensor
    to: 'open'

  action:
    - service: light.turn_on
      target:
        entity_id: !input light_switch

    - wait_for_trigger:
        platform: state
        entity_id: !input door_sensor
        to: 'closed'
      timeout: '00:02:00'

    - service: light.turn_off
      target:
        entity_id: !input light_switch
  ```

  Explanation:
  1. The blueprint defines two inputs: `door_sensor` and `light_switch`.
  2. The trigger for the automation is when the `door_sensor` changes state to `open`.
  3. The first action is to turn on the `light_switch`.
  4. The automation then waits for the `door_sensor` to change state to `closed`, or a 2-minute timeout to occur.
  5. Finally, the `light_switch` is turned off, either when the door is closed or after the timeout.

  This blueprint allows the user to specify the door sensor and light(s) to use, making it flexible for different use cases.
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMTAF971RYMXESJ5911F8Q9P
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      system: |-
        Current time is 13:12:36. Today's date is 2025-02-23.

        Create a Home Assistant blueprint YAML configuration based on the user request.

        Please respond only with markdown that contains yaml. You can
        add comments inline with your step by step thinking. The response must start
        with ```yaml and end with ``` because your answer will be parsed by code. It
        is very important to stick to the format.
      messages:
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        content:
        - type: text
          text: |-
            ```yaml
            blueprint:
              name: Light on door
              description: Turn on a light when a door opens.
              domain: automation
              input:
                door_sensor:
                  name: Door Sensor
                  description: The binary sensor that detects when the door opens and closes.
                  selector:
                    entity:
                      domain: binary_sensor
                light_switch:
                  name: Light Switch
                  description: The light or lights to turn on when the door opens.
                  selector:
                    target:
                      entity:
                        domain: light

            trigger:
              platform: state
              entity_id: !input door_sensor
              to: 'open'

            action:
              - service: light.turn_on
                target:
                  entity_id: !input light_switch

              - wait_for_trigger:
                  platform: state
                  entity_id: !input door_sensor
                  to: 'closed'
                timeout: '00:02:00'

              - service: light.turn_off
                target:
                  entity_id: !input light_switch
            ```

            Explanation:
            1. The blueprint defines two inputs: `door_sensor` and `light_switch`.
            2. The trigger for the automation is when the `door_sensor` changes state to `open`.
            3. The first action is to turn on the `light_switch`.
            4. The automation then waits for the `door_sensor` to change state to `closed`, or a 2-minute timeout to occur.
            5. Finally, the `light_switch` is turned off, either when the door is closed or after the timeout.

            This blueprint allows the user to specify the door sensor and light(s) to use, making it flexible for different use cases.
  tries: 0
