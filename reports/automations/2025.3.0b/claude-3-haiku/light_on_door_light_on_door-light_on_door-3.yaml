---
uuid: 06fd9ee1-364e-475f-a97b-cd4d42c6735f
task_id: light_on_door_light_on_door-light_on_door-3
model_id: null
category: binary_sensor
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: "```yaml\nblueprint:\n  name: Turn on light when door opens\n  description:\
  \ Turns on a light when a door opens, and turns it off when the door closes or after\
  \ a timeout.\n  domain: automation\n  input:\n    door_sensor:\n      name: Door\
  \ Sensor\n      description: Binary sensor that triggers when the door opens/closes\n\
  \      selector:\n        entity:\n          domain: binary_sensor\n    light_switch:\n\
  \      name: Light to control\n      description: The light(s) to turn on when the\
  \ door opens\n      selector:\n        entity:\n          domain: light\n\n  # Define\
  \ the automation\n  trigger:\n    platform: state\n    entity_id: !input door_sensor\n\
  \    to: 'open'\n  \n  action:\n    # Turn on the light(s)\n    - service: light.turn_on\n\
  \      target:\n        entity_id: !input light_switch\n    \n    # Wait for 2 minutes\
  \ before turning the light off\n    - delay:\n        minutes: 2\n    \n    # Turn\
  \ off the light(s)\n    - service: light.turn_off\n      target:\n        entity_id:\
  \ !input light_switch\n    \n    # Turn off the light(s) if the door closes before\
  \ the timeout\n    - trigger:\n        platform: state\n        entity_id: !input\
  \ door_sensor \n        to: 'closed'\n      action:\n        - service: light.turn_off\n\
  \          target:\n            entity_id: !input light_switch\n```\n\nExplanation:\n\
  \n1. The blueprint defines two input parameters: `door_sensor` (a binary sensor\
  \ that triggers when the door opens/closes) and `light_switch` (the light(s) to\
  \ control).\n2. The `trigger` section listens for the `door_sensor` to change to\
  \ the `open` state, which starts the automation.\n3. The first `action` turns on\
  \ the specified `light_switch` entity(ies).\n4. The second `action` implements a\
  \ 2-minute delay before turning off the light(s).\n5. The third `action` listens\
  \ for the `door_sensor` to change to the `closed` state, and turns off the light(s)\
  \ if this happens before the 2-minute timeout.\n\nThis ensures the light(s) are\
  \ turned on when the door opens, and turned off when the door closes or after a\
  \ 2-minute timeout."
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMTAFDQQBCXRYEG0S9Q9F8AA
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      system: |-
        Current time is 13:12:41. Today's date is 2025-02-23.

        Create a Home Assistant blueprint YAML configuration based on the user request.

        Please respond only with markdown that contains yaml. You can
        add comments inline with your step by step thinking. The response must start
        with ```yaml and end with ``` because your answer will be parsed by code. It
        is very important to stick to the format.
      messages:
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        content:
        - type: text
          text: "```yaml\nblueprint:\n  name: Turn on light when door opens\n  description:\
            \ Turns on a light when a door opens, and turns it off when the door closes\
            \ or after a timeout.\n  domain: automation\n  input:\n    door_sensor:\n\
            \      name: Door Sensor\n      description: Binary sensor that triggers\
            \ when the door opens/closes\n      selector:\n        entity:\n     \
            \     domain: binary_sensor\n    light_switch:\n      name: Light to control\n\
            \      description: The light(s) to turn on when the door opens\n    \
            \  selector:\n        entity:\n          domain: light\n\n  # Define the\
            \ automation\n  trigger:\n    platform: state\n    entity_id: !input door_sensor\n\
            \    to: 'open'\n  \n  action:\n    # Turn on the light(s)\n    - service:\
            \ light.turn_on\n      target:\n        entity_id: !input light_switch\n\
            \    \n    # Wait for 2 minutes before turning the light off\n    - delay:\n\
            \        minutes: 2\n    \n    # Turn off the light(s)\n    - service:\
            \ light.turn_off\n      target:\n        entity_id: !input light_switch\n\
            \    \n    # Turn off the light(s) if the door closes before the timeout\n\
            \    - trigger:\n        platform: state\n        entity_id: !input door_sensor\
            \ \n        to: 'closed'\n      action:\n        - service: light.turn_off\n\
            \          target:\n            entity_id: !input light_switch\n```\n\n\
            Explanation:\n\n1. The blueprint defines two input parameters: `door_sensor`\
            \ (a binary sensor that triggers when the door opens/closes) and `light_switch`\
            \ (the light(s) to control).\n2. The `trigger` section listens for the\
            \ `door_sensor` to change to the `open` state, which starts the automation.\n\
            3. The first `action` turns on the specified `light_switch` entity(ies).\n\
            4. The second `action` implements a 2-minute delay before turning off\
            \ the light(s).\n5. The third `action` listens for the `door_sensor` to\
            \ change to the `closed` state, and turns off the light(s) if this happens\
            \ before the 2-minute timeout.\n\nThis ensures the light(s) are turned\
            \ on when the door opens, and turned off when the door closes or after\
            \ a 2-minute timeout."
  tries: 0
