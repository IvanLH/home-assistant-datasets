---
uuid: e3817080-50bb-4b7d-95d2-41e5f1e5e649
task_id: light_on_door_light_on_door-light_on_door-0
model_id: null
category: binary_sensor
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: "```yaml\nblueprint:\n  name: Light on door\n  description: Turn on a light\
  \ when a door opens and turn it off when the door closes or after a timeout.\n \
  \ domain: automation\n  input:\n    door_sensor:\n      name: Door Sensor\n    \
  \  description: Binary sensor that represents the state of the door.\n      selector:\n\
  \        entity:\n          domain: binary_sensor\n    light_switch:\n      name:\
  \ Light Switch\n      description: One or more light entities to control.\n    \
  \  selector:\n        target:\n          entity:\n            domain: light\n\n\
  trigger:\n  platform: state\n  entity_id: !input door_sensor\n  to: 'open'\n\naction:\n\
  \  - service: light.turn_on\n    target: !input light_switch\n\n  - delay: \n  \
  \    minutes: 2\n\n  - service: light.turn_off\n    target: !input light_switch\n\
  \    \n    # If the door was closed before the 2 minute timeout, don't turn the\
  \ light off\n    condition:\n      condition: state\n      entity_id: !input door_sensor\n\
  \      state: 'closed'\n```\n\nExplanation:\n\n1. The blueprint defines the input\
  \ parameters: `door_sensor` (binary sensor) and `light_switch` (light entity or\
  \ entities).\n2. The trigger for the automation is when the `door_sensor` entity\
  \ changes state to `open`.\n3. The action first turns on the `light_switch` entity\
  \ or entities.\n4. Then it sets a 2 minute delay.\n5. After the 2 minute delay,\
  \ it turns off the `light_switch` entity or entities, but only if the `door_sensor`\
  \ is not in the `closed` state (i.e., the door is still open).\n\nThis ensures the\
  \ light is turned on when the door opens, and turned off when the door closes or\
  \ after a 2 minute timeout, whichever comes first."
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMTAF1ACXGBD3XM104R4K822
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      system: |-
        Current time is 13:12:28. Today's date is 2025-02-23.

        Create a Home Assistant blueprint YAML configuration based on the user request.

        Please respond only with markdown that contains yaml. You can
        add comments inline with your step by step thinking. The response must start
        with ```yaml and end with ``` because your answer will be parsed by code. It
        is very important to stick to the format.
      messages:
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        content:
        - type: text
          text: "```yaml\nblueprint:\n  name: Light on door\n  description: Turn on\
            \ a light when a door opens and turn it off when the door closes or after\
            \ a timeout.\n  domain: automation\n  input:\n    door_sensor:\n     \
            \ name: Door Sensor\n      description: Binary sensor that represents\
            \ the state of the door.\n      selector:\n        entity:\n         \
            \ domain: binary_sensor\n    light_switch:\n      name: Light Switch\n\
            \      description: One or more light entities to control.\n      selector:\n\
            \        target:\n          entity:\n            domain: light\n\ntrigger:\n\
            \  platform: state\n  entity_id: !input door_sensor\n  to: 'open'\n\n\
            action:\n  - service: light.turn_on\n    target: !input light_switch\n\
            \n  - delay: \n      minutes: 2\n\n  - service: light.turn_off\n    target:\
            \ !input light_switch\n    \n    # If the door was closed before the 2\
            \ minute timeout, don't turn the light off\n    condition:\n      condition:\
            \ state\n      entity_id: !input door_sensor\n      state: 'closed'\n\
            ```\n\nExplanation:\n\n1. The blueprint defines the input parameters:\
            \ `door_sensor` (binary sensor) and `light_switch` (light entity or entities).\n\
            2. The trigger for the automation is when the `door_sensor` entity changes\
            \ state to `open`.\n3. The action first turns on the `light_switch` entity\
            \ or entities.\n4. Then it sets a 2 minute delay.\n5. After the 2 minute\
            \ delay, it turns off the `light_switch` entity or entities, but only\
            \ if the `door_sensor` is not in the `closed` state (i.e., the door is\
            \ still open).\n\nThis ensures the light is turned on when the door opens,\
            \ and turned off when the door closes or after a 2 minute timeout, whichever\
            \ comes first."
  tries: 0
