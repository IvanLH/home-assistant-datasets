---
uuid: c9942372-1291-43e3-b6dd-64052398e4a8
task_id: light_on_door_light_on_door-light_on_door-3
category: binary_sensor
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Door Sensor Light
    description: Turn on a light when a door opens.
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor that triggers the automation.
        selector:
          entity:
            domain: binary_sensor
            device_class: door
      light_switch:
        name: Light Switch
        description: The light to turn on/off.
        selector:
          target:
            entity:
              domain: light
    variables:
      timeout: 120 # seconds
    mode: restart
  trigger:
    - platform: state
      entity_id: !input door_sensor
      from: 'off'
      to: 'on'
  action:
    - service: light.turn_on
      target: !input light_switch
    - delay: !lambda |-
        return states.get('sensor.door_sensor_timer') == 'on' and now().timestamp() - state.last_changed.timestamp() < 120 # seconds
    - service: light.turn_off
      target: !input light_switch
      condition: !condition
        condition: or
        conditions:
          - condition: state
            entity_id: !input door_sensor
            state: 'off'
          - condition: template
            value_template: >
              {{ now().timestamp() - trigger.now.timestamp() > 120 }}

  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMKFERW0KZEQS90NSNVGAVXQ
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      messages:
      - role: system
        agent_id: conversation.mock_title
        content: |-
          Current time is 21:25:01. Today's date is 2025-02-20.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        agent_id: conversation.mock_title
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Door Sensor Light
            description: Turn on a light when a door opens.
            domain: automation
            input:
              door_sensor:
                name: Door Sensor
                description: The binary sensor that triggers the automation.
                selector:
                  entity:
                    domain: binary_sensor
                    device_class: door
              light_switch:
                name: Light Switch
                description: The light to turn on/off.
                selector:
                  target:
                    entity:
                      domain: light
            variables:
              timeout: 120 # seconds
            mode: restart
          trigger:
            - platform: state
              entity_id: !input door_sensor
              from: 'off'
              to: 'on'
          action:
            - service: light.turn_on
              target: !input light_switch
            - delay: !lambda |-
                return states.get('sensor.door_sensor_timer') == 'on' and now().timestamp() - state.last_changed.timestamp() < 120 # seconds
            - service: light.turn_off
              target: !input light_switch
              condition: !condition
                condition: or
                conditions:
                  - condition: state
                    entity_id: !input door_sensor
                    state: 'off'
                  - condition: template
                    value_template: >
                      {{ now().timestamp() - trigger.now.timestamp() > 120 }}

          ```
      tools: null
  tries: 0
eval_result:
  result: false
  message: Automation enttiy id automation.pantry_light_door syntax likely not valid
