---
uuid: 21b9000f-5eae-43ea-87a3-8def25032174
task_id: light_on_door_light_on_door-light_on_door-1
category: binary_sensor
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  alias: Light on Door
  description: Turn on a light when a door opens, and off when it closes or after a timeout.
  use_blueprint:
    path: blueprint.yaml
  input:
    door_sensor:
      name: Door Sensor
      description: The binary sensor that triggers the automation.
      selector:
        entity:
          domain: binary_sensor
          device_class: door
    light_switch:
      name: Light Switch
      description: The light to turn on/off.
      selector:
        entity:
          domain: light
          multiple: true

  blueprint:
    name: Light on Door Blueprint
    domain: automation
    variables:
      timeout: 120 # 2 minutes in seconds
    trigger:
    - platform: state
      entity_id: !input door_sensor
      from: 'off'
      to: 'on'
    action:
    - service: light.turn_on
      target:
        entity_id: !input light_switch
    - delay: !lambda |-
        return states.get('!input door_sensor') == 'on' ? 0 : data.timeout
    - choose:
      - conditions:
        - condition: state
          entity_id: !input door_sensor
          state: 'off'
      - sequence:
        - service: light.turn_off
          target:
            entity_id: !input light_switch
      - default:
        - service: light.turn_off
          target:
            entity_id: !input light_switch

  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMKFEJMP6EAV6BVW2YJXDJVT
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      messages:
      - role: system
        agent_id: conversation.mock_title
        content: |-
          Current time is 21:24:55. Today's date is 2025-02-20.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        agent_id: conversation.mock_title
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          alias: Light on Door
          description: Turn on a light when a door opens, and off when it closes or after a timeout.
          use_blueprint:
            path: blueprint.yaml
          input:
            door_sensor:
              name: Door Sensor
              description: The binary sensor that triggers the automation.
              selector:
                entity:
                  domain: binary_sensor
                  device_class: door
            light_switch:
              name: Light Switch
              description: The light to turn on/off.
              selector:
                entity:
                  domain: light
                  multiple: true

          blueprint:
            name: Light on Door Blueprint
            domain: automation
            variables:
              timeout: 120 # 2 minutes in seconds
            trigger:
            - platform: state
              entity_id: !input door_sensor
              from: 'off'
              to: 'on'
            action:
            - service: light.turn_on
              target:
                entity_id: !input light_switch
            - delay: !lambda |-
                return states.get('!input door_sensor') == 'on' ? 0 : data.timeout
            - choose:
              - conditions:
                - condition: state
                  entity_id: !input door_sensor
                  state: 'off'
              - sequence:
                - service: light.turn_off
                  target:
                    entity_id: !input light_switch
              - default:
                - service: light.turn_off
                  target:
                    entity_id: !input light_switch

          ```
      tools: null
  tries: 0
eval_result:
  result: false
  message: Automation enttiy id automation.pantry_light_door syntax likely not valid
