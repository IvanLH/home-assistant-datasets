---
uuid: 8fef6514-e819-49d0-ada4-ec1087a37ea6
task_id: light_on_door_light_on_door-light_on_door-2
category: binary_sensor
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  Here's a Home Assistant blueprint YAML configuration based on your request:

  ```yaml
  # This blueprint creates an automation to turn on a light when a door opens
  # and turn it off when the door closes or after a 2-minute timeout.

  blueprint:
    name: "Light on Door Open"
    description: "Turn on a light when a door opens and off when it closes or after a timeout"
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: "The binary sensor that detects if the door is open or closed"
        selector:
          entity:
            domain: binary_sensor
            device_class: door
      light_switch:
        name: Light
        description: "The light(s) to control"
        selector:
          target:
            entity:
              domain: light

  # Define the triggers for the automation
  trigger:
    - platform: state
      entity_id: !input door_sensor
      to: "on"
    - platform: state
      entity_id: !input door_sensor
      to: "off"

  # Define the actions to take when triggered
  action:
    - choose:
        # When the door opens
        - conditions:
            - condition: state
              entity_id: !input door_sensor
              state: "on"
          sequence:
            - service: light.turn_on
              target: !input light_switch
            # Set up a 2-minute timer to turn off the light
            - wait_for_trigger:
                - platform: state
                  entity_id: !input door_sensor
                  to: "off"
                - platform: numeric_state
                  entity_id: timer.door_open_timer
                  above: 120  # 2 minutes in seconds
              timeout:
                hours: 0
                minutes: 2
                seconds: 0
            # Turn off the light after the wait
            - service: light.turn_off
              target: !input light_switch
        # When the door closes
        - conditions:
            - condition: state
              entity_id: !input door_sensor
              state: "off"
          sequence:
            - service: light.turn_off
              target: !input light_switch

  # Define a mode to handle multiple triggers
  mode: restart
  ```

  This blueprint creates an automation that turns on a light when a door opens and turns it off when the door closes or after a 2-minute timeout. Here's a breakdown of the configuration:

  1. The blueprint defines two inputs: `door_sensor` (a binary sensor for the door) and `light_switch` (the light(s) to control).

  2. The trigger section defines two triggers: one for when the door opens and one for when it closes.

  3. The action section uses a choose block to handle different scenarios:
     - When the door opens:
       - Turn on the light
       - Wait for either the door to close or a 2-minute timeout
       - Turn off the light after the wait
     - When the door closes:
       - Turn off the light immediately

  4. The mode is set to "restart" to handle multiple triggers appropriately.

  This blueprint should fulfill the requirements you specified, providing a flexible automation for controlling lights based on door sensors.
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMKFN7QCNJ1Q8R4HRSPNCKZ8
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      system: |-
        Current time is 21:28:33. Today's date is 2025-02-20.

        Create a Home Assistant blueprint YAML configuration based on the user request.

        Please respond only with markdown that contains yaml. You can
        add comments inline with your step by step thinking. The response must start
        with ```yaml and end with ``` because your answer will be parsed by code. It
        is very important to stick to the format.
      messages:
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        content:
        - type: text
          text: |-
            Here's a Home Assistant blueprint YAML configuration based on your request:

            ```yaml
            # This blueprint creates an automation to turn on a light when a door opens
            # and turn it off when the door closes or after a 2-minute timeout.

            blueprint:
              name: "Light on Door Open"
              description: "Turn on a light when a door opens and off when it closes or after a timeout"
              domain: automation
              input:
                door_sensor:
                  name: Door Sensor
                  description: "The binary sensor that detects if the door is open or closed"
                  selector:
                    entity:
                      domain: binary_sensor
                      device_class: door
                light_switch:
                  name: Light
                  description: "The light(s) to control"
                  selector:
                    target:
                      entity:
                        domain: light

            # Define the triggers for the automation
            trigger:
              - platform: state
                entity_id: !input door_sensor
                to: "on"
              - platform: state
                entity_id: !input door_sensor
                to: "off"

            # Define the actions to take when triggered
            action:
              - choose:
                  # When the door opens
                  - conditions:
                      - condition: state
                        entity_id: !input door_sensor
                        state: "on"
                    sequence:
                      - service: light.turn_on
                        target: !input light_switch
                      # Set up a 2-minute timer to turn off the light
                      - wait_for_trigger:
                          - platform: state
                            entity_id: !input door_sensor
                            to: "off"
                          - platform: numeric_state
                            entity_id: timer.door_open_timer
                            above: 120  # 2 minutes in seconds
                        timeout:
                          hours: 0
                          minutes: 2
                          seconds: 0
                      # Turn off the light after the wait
                      - service: light.turn_off
                        target: !input light_switch
                  # When the door closes
                  - conditions:
                      - condition: state
                        entity_id: !input door_sensor
                        state: "off"
                    sequence:
                      - service: light.turn_off
                        target: !input light_switch

            # Define a mode to handle multiple triggers
            mode: restart
            ```

            This blueprint creates an automation that turns on a light when a door opens and turns it off when the door closes or after a 2-minute timeout. Here's a breakdown of the configuration:

            1. The blueprint defines two inputs: `door_sensor` (a binary sensor for the door) and `light_switch` (the light(s) to control).

            2. The trigger section defines two triggers: one for when the door opens and one for when it closes.

            3. The action section uses a choose block to handle different scenarios:
               - When the door opens:
                 - Turn on the light
                 - Wait for either the door to close or a 2-minute timeout
                 - Turn off the light after the wait
               - When the door closes:
                 - Turn off the light immediately

            4. The mode is set to "restart" to handle multiple triggers appropriately.

            This blueprint should fulfill the requirements you specified, providing a flexible automation for controlling lights based on door sensors.
  tries: 0
eval_result:
  result: true
