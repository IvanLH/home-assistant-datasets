# serializer version: 1
# name: test_converation_record
  '''
  <|begin_of_text|><|start_header_id|>system<|end_header_id|>
  
  Environment: ipython
  Cutting Knowledge Date: December 2023
  Today Date: 26 Jul 2024
  
  You are a helpful assistant.<|eot_id|><|start_header_id|>user<|end_header_id|>
  
  Given the following functions, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.
  
  Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}. Do not use variables.
  
  {
      "type": "function",
      "function": {
          "name": "get_current_conditions",
          "description": "Get the current weather conditions for a specific location",
          "parameters": {
              "location": {
                  "type": "string"
              }
          }
      }
  }
  
  What is the weather like today in SF?<|eot_id|><|start_header_id|>assistant<|end_header_id|>
  
  {"name": "get_current_conditions", "parameters": {"location": "San Francisco, CA"}}<|eot_id|>
  '''
# ---
# name: test_converation_record_output
  '''
  <|begin_of_text|><|start_header_id|>system<|end_header_id|>
  
  Environment: ipython
  Cutting Knowledge Date: December 2023
  Today Date: 26 Jul 2024
  
  You are a helpful assistant.<|eot_id|><|start_header_id|>user<|end_header_id|>
  
  Given the following functions, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.
  
  Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}. Do not use variables.
  
  {
      "type": "function",
      "function": {
          "name": "get_current_conditions",
          "description": "Get the current weather conditions for a specific location",
          "parameters": {
              "location": {
                  "type": "string"
              }
          }
      }
  }
  
  What is the weather like today in SF?<|eot_id|><|start_header_id|>assistant<|end_header_id|>
  
  I can't help you with that.<|eot_id|>
  '''
# ---
# name: test_conversation
  '''
  <|begin_of_text|><|start_header_id|>system<|end_header_id|>
  
  Cutting Knowledge Date: December 2023
  Today Date: 26 Jul 2024
  
  You are a helpful assistant.<|eot_id|><|start_header_id|>user<|end_header_id|>
  
  What is the capital of France?<|eot_id|><|start_header_id|>assistant<|end_header_id|>
  
  The capital of France is Paris.<|eot_id|>
  '''
# ---
# name: test_llama3_dataset_from_conversations
  '''
  <|start_header_id|>system<|end_header_id|>
  
  
  You are a voice assistant for Home Assistant.
  Answer questions about the world truthfully.
  Answer in plain text. Keep it simple and to the point.
  When controlling Home Assistant always call the intent tools. Use HassTurnOn to lock and HassTurnOff to unlock a lock. When controlling a device, prefer passing just name and domain. When controlling an area, prefer passing just area name and domain.
  When a user asks to turn on all devices of a specific type, ask user to specify an area, unless there is only one device of that type.
  This device is not able to start timers.
  An overview of the areas and the devices in this smart home:
  - names: Kitchen Thermostat
    domain: climate
    state: 'off'
    areas: Kitchen
    attributes:
      current_temperature: '22'
  - names: Security Camera Motion
    domain: binary_sensor
    state: 'off'
    areas: Garage
    attributes:
      device_class: motion
  - names: Security Camera Person
    domain: binary_sensor
    state: 'off'
    areas: Garage
    attributes:
      device_class: occupancy
  - names: Security Camera Sound
    domain: binary_sensor
    state: 'off'
    areas: Garage
    attributes:
      device_class: sound
  - names: Motion Sensor
    domain: binary_sensor
    state: 'on'
    areas: Garage
    attributes:
      device_class: motion
  - names: Motion Sensor Battery
    domain: binary_sensor
    state: 'off'
    areas: Garage
    attributes:
      device_class: battery
  - names: Living Room Light
    domain: light
    state: 'on'
    areas: Living Room
    attributes:
      brightness: '100'
  - names: Kitchen Light
    domain: light
    state: 'off'
    areas: Kitchen
  - names: Dining Room Light
    domain: light
    state: 'off'
    areas: Dining Room
  - names: Master Bedroom Light
    domain: light
    state: 'on'
    areas: Master Bedroom
    attributes:
      brightness: '100'
  - names: Master Bathroom Light
    domain: light
    state: 'off'
    areas: Master Bedroom
  - names: Guest Bedroom Light
    domain: light
    state: 'on'
    areas: Guest Bedroom
    attributes:
      brightness: '100'
  - names: Guest Bathroom Light
    domain: light
    state: 'off'
    areas: Guest Bedroom
  - names: Child'S Room Light
    domain: light
    state: 'on'
    areas: Child's room
    attributes:
      brightness: '100'
  - names: Study Light
    domain: light
    state: 'on'
    areas: Study
    attributes:
      brightness: '100'
  - names: Conservatory Light
    domain: light
    state: 'off'
    areas: Conservatory
  - names: Chapel Light
    domain: light
    state: 'off'
    areas: Chapel
  - names: Garden Light
    domain: light
    state: 'off'
    areas: Garden
  - names: Patio Light
    domain: light
    state: 'off'
    areas: Patio
  - names: Garage Door
    domain: light
    state: 'off'
    areas: Garage
  - names: Garage Light
    domain: light
    state: 'off'
    areas: Garage
  - names: Garage Door
    domain: cover
    state: closed
    areas: Garage
    attributes:
      current_position: '0'
      device_class: garage
  - names: Fountain Switch
    domain: switch
    state: 'on'
    areas: Fountain
    attributes:
      device_class: switch
  - names: Kitchen Thermostat Temperature
    domain: sensor
    state: '22'
    areas: Kitchen
    attributes:
      unit_of_measurement: Â°C
      device_class: temperature
  - names: Kitchen Thermostat Humidity
    domain: sensor
    state: '45'
    areas: Kitchen
    attributes:
      unit_of_measurement: '%'
      device_class: humidity
  - names: Motion Sensor Battery
    domain: sensor
    state: '90'
    areas: Garage
    attributes:
      unit_of_measurement: '%'
      device_class: battery
  - names: Smart Speaker
    domain: media_player
    state: playing
    areas: Living Room
    attributes:
      volume_level: 0.5
      device_class: speaker
  - names: Study Smart Speaker
    domain: media_player
    state: playing
    areas: Study
    attributes:
      volume_level: 0.5
      device_class: speaker
  
  
  You are a helpful assistant with tool calling capabilities. When you receive a tool call response, use the output to format an answer to the orginal use question.<|eot_id|><|start_header_id|>user<|end_header_id|>
  
  Given the following functions, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.
  
  Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}. Do not use variables.
  
  {
      "type": "function",
      "function": {
          "name": "HassTurnOn",
          "description": "Turns on/opens a device or entity",
          "parameters": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string"
                  },
                  "area": {
                      "type": "string"
                  },
                  "floor": {
                      "type": "string"
                  },
                  "domain": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "device_class": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "water",
                              "gas",
                              "awning",
                              "blind",
                              "curtain",
                              "damper",
                              "door",
                              "garage",
                              "gate",
                              "shade",
                              "shutter",
                              "window",
                              "outlet",
                              "switch",
                              "tv",
                              "speaker",
                              "receiver"
                          ]
                      }
                  }
              },
              "required": []
          }
      }
  }
  {
      "type": "function",
      "function": {
          "name": "HassTurnOff",
          "description": "Turns off/closes a device or entity",
          "parameters": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string"
                  },
                  "area": {
                      "type": "string"
                  },
                  "floor": {
                      "type": "string"
                  },
                  "domain": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "device_class": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "water",
                              "gas",
                              "awning",
                              "blind",
                              "curtain",
                              "damper",
                              "door",
                              "garage",
                              "gate",
                              "shade",
                              "shutter",
                              "window",
                              "outlet",
                              "switch",
                              "tv",
                              "speaker",
                              "receiver"
                          ]
                      }
                  }
              },
              "required": []
          }
      }
  }
  {
      "type": "function",
      "function": {
          "name": "HassSetPosition",
          "description": "Sets the position of a device or entity",
          "parameters": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string"
                  },
                  "area": {
                      "type": "string"
                  },
                  "floor": {
                      "type": "string"
                  },
                  "domain": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "device_class": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "water",
                              "gas",
                              "awning",
                              "blind",
                              "curtain",
                              "damper",
                              "door",
                              "garage",
                              "gate",
                              "shade",
                              "shutter",
                              "window"
                          ]
                      }
                  },
                  "position": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100
                  }
              },
              "required": [
                  "position"
              ]
          }
      }
  }
  {
      "type": "function",
      "function": {
          "name": "HassLightSet",
          "description": "Sets the brightness or color of a light",
          "parameters": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string"
                  },
                  "area": {
                      "type": "string"
                  },
                  "floor": {
                      "type": "string"
                  },
                  "domain": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "color": {
                      "type": "string"
                  },
                  "temperature": {
                      "type": "integer",
                      "minimum": 0
                  },
                  "brightness": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100
                  }
              },
              "required": []
          }
      }
  }
  {
      "type": "function",
      "function": {
          "name": "HassMediaUnpause",
          "description": "Resumes a media player",
          "parameters": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string"
                  },
                  "area": {
                      "type": "string"
                  },
                  "floor": {
                      "type": "string"
                  },
                  "domain": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "media_player"
                          ]
                      }
                  },
                  "device_class": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "tv",
                              "speaker",
                              "receiver"
                          ]
                      }
                  }
              },
              "required": []
          }
      }
  }
  {
      "type": "function",
      "function": {
          "name": "HassMediaPause",
          "description": "Pauses a media player",
          "parameters": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string"
                  },
                  "area": {
                      "type": "string"
                  },
                  "floor": {
                      "type": "string"
                  },
                  "domain": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "media_player"
                          ]
                      }
                  },
                  "device_class": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "tv",
                              "speaker",
                              "receiver"
                          ]
                      }
                  }
              },
              "required": []
          }
      }
  }
  {
      "type": "function",
      "function": {
          "name": "HassMediaNext",
          "description": "Skips a media player to the next item",
          "parameters": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string"
                  },
                  "area": {
                      "type": "string"
                  },
                  "floor": {
                      "type": "string"
                  },
                  "domain": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "media_player"
                          ]
                      }
                  },
                  "device_class": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "tv",
                              "speaker",
                              "receiver"
                          ]
                      }
                  }
              },
              "required": []
          }
      }
  }
  {
      "type": "function",
      "function": {
          "name": "HassMediaPrevious",
          "description": "Replays the previous item for a media player",
          "parameters": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string"
                  },
                  "area": {
                      "type": "string"
                  },
                  "floor": {
                      "type": "string"
                  },
                  "domain": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "media_player"
                          ]
                      }
                  },
                  "device_class": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "tv",
                              "speaker",
                              "receiver"
                          ]
                      }
                  }
              },
              "required": []
          }
      }
  }
  {
      "type": "function",
      "function": {
          "name": "HassSetVolume",
          "description": "Sets the volume of a media player",
          "parameters": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string"
                  },
                  "area": {
                      "type": "string"
                  },
                  "floor": {
                      "type": "string"
                  },
                  "domain": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "media_player"
                          ]
                      }
                  },
                  "device_class": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "tv",
                              "speaker",
                              "receiver"
                          ]
                      }
                  },
                  "volume_level": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100
                  }
              },
              "required": [
                  "volume_level"
              ]
          }
      }
  }
  
  Make the guest bedroom light 50% bright<|eot_id|><|start_header_id|>assistant<|end_header_id|>
  
  {"name": "HassLightSet", "parameters": {'brightness': 50.0, 'name': 'Guest Bedroom Light'}}
  '''
# ---
# name: test_system
  '''
  <|begin_of_text|><|start_header_id|>system<|end_header_id|>
  
  Cutting Knowledge Date: December 2023
  Today Date: 26 Jul 2024
  
  You are a helpful assistant.<|eot_id|><|start_header_id|>assistant<|end_header_id|>
  
  
  '''
# ---
# name: test_system_tools
  '''
  <|begin_of_text|><|start_header_id|>system<|end_header_id|>
  
  Environment: ipython
  Cutting Knowledge Date: December 2023
  Today Date: 26 Jul 2024
  
  You are a helpful assistant.<|eot_id|><|start_header_id|>user<|end_header_id|>
  
  Given the following functions, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.
  
  Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}. Do not use variables.
  
  {
      "type": "function",
      "function": {
          "name": "get_current_conditions",
          "description": "Get the current weather conditions for a specific location",
          "parameters": {
              "location": {
                  "type": "string"
              }
          }
      }
  }
  
  What is the weather like today in SF?<|eot_id|><|start_header_id|>assistant<|end_header_id|>
  
  
  '''
# ---
# name: test_tool_call
  '''
  <|begin_of_text|><|start_header_id|>system<|end_header_id|>
  
  Environment: ipython
  Cutting Knowledge Date: December 2023
  Today Date: 26 Jul 2024
  
  You are a helpful assistant.<|eot_id|><|start_header_id|>user<|end_header_id|>
  
  Given the following functions, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.
  
  Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}. Do not use variables.
  
  {
      "type": "function",
      "function": {
          "name": "get_current_conditions",
          "description": "Get the current weather conditions for a specific location",
          "parameters": {
              "location": {
                  "type": "string"
              }
          }
      }
  }
  
  What is the weather like today in SF?<|eot_id|><|start_header_id|>assistant<|end_header_id|>
  
  {"name": "get_current_conditions", "parameters": {"location": "San Francisco, CA"}}<|eot_id|><|start_header_id|>ipython<|end_header_id|>
  
  {"output": "Clouds giving way to sun Hi: 76Â° Tonight: Mainly clear early, then areas of low clouds forming Lo: 56Â°"}<|eot_id|><|start_header_id|>assistant<|end_header_id|>
  
  
  '''
# ---
# name: test_tool_call_conversation
  '''
  <|begin_of_text|><|start_header_id|>system<|end_header_id|>
  
  Environment: ipython
  Cutting Knowledge Date: December 2023
  Today Date: 26 Jul 2024
  
  You are a helpful assistant.<|eot_id|><|start_header_id|>user<|end_header_id|>
  
  Given the following functions, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.
  
  Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}. Do not use variables.
  
  {
      "type": "function",
      "function": {
          "name": "get_current_conditions",
          "description": "Get the current weather conditions for a specific location",
          "parameters": {
              "location": {
                  "type": "string"
              }
          }
      }
  }
  
  What is the weather like today in SF?<|eot_id|><|start_header_id|>assistant<|end_header_id|>
  
  {"name": "get_current_conditions", "parameters": {"location": "San Francisco, CA"}}<|eot_id|><|start_header_id|>ipython<|end_header_id|>
  
  {"output": "Clouds giving way to sun Hi: 76Â° Tonight: Mainly clear early, then areas of low clouds forming Lo: 56Â°"}<|eot_id|><|start_header_id|>assistant<|end_header_id|>
  
  The weather in SF looks cloudy today.<|eot_id|>
  '''
# ---
